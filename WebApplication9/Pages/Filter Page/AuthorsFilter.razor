@page "/authors"

@using WebApplication9.Data.Models;
@using WebApplication9.Data.Repositories.InterfacesRepo;
@using WebApplication9.Pages.Authors_Components;
@inject IAuthorRepository AuthorRepo;

@attribute [Authorize]

<h1 class="h1">Authors</h1>
<div class="image main">
    <img src="https://demo.phpjabbers.com/free-web-templates/book-online-store-website-template-86/images/banner-image-6-1920x500.jpg" class="imageHeader" alt="">
</div>
<br>
<FilterGenericItems Items="@findedauthors" TItem="Author" SearchItems="@GetAuthorBySearchValue">
    <Item Context="author">
        <AuthorItem Author="author" />
    </Item>
</FilterGenericItems>


@code {
    private IEnumerable<Author> authors = new List<Author>();
    private IEnumerable<Author> findedauthors = new List<Author>();
    protected async override Task OnInitializedAsync()
    {
        authors = await AuthorRepo.GetAll();
        findedauthors = await AuthorRepo.GetAll();
    }

    private IEnumerable<Author> GetAuthorBySearchValue(string searchValue)
    {
        if (string.IsNullOrEmpty(searchValue)) return authors;
        else return authors.Where(i => i.FullName.Contains(searchValue, StringComparison.OrdinalIgnoreCase)
        || i.MainDescription.Contains(searchValue, StringComparison.OrdinalIgnoreCase)
        || i.SmallDescription.Contains(searchValue, StringComparison.OrdinalIgnoreCase));
    }
}
